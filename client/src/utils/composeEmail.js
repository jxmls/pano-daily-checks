// src/utils/composeEmail.js
// Standalone mailto helper for the DailyChecks forms.
// Does NOT modify or import your existing utils/email.js

/* ---------- Recipients per module (edit to taste) ---------- */
export const EMAIL_LISTS = {
  solarwinds: { to: ["noc@panoptics.com"], cc: ["infra@panoptics.com"] },
  veeam:      { to: ["noc@panoptics.com"], cc: ["infra@panoptics.com"] },
  vmware:     { to: ["noc@panoptics.com"], cc: ["infra@panoptics.com"] },
  checkpoint: { to: ["soc@panoptics.com"], cc: ["infra@panoptics.com"] },
};

/* Optional global overrides from env/localStorage (keeps your current pattern) */
function getGlobalRecipients() {
  const to  = process.env.REACT_APP_CHECKLIST_TO || localStorage.getItem("checklist.to")  || "";
  const cc  = process.env.REACT_APP_CHECKLIST_CC || localStorage.getItem("checklist.cc")  || "";
  const bcc = process.env.REACT_APP_CHECKLIST_BCC|| localStorage.getItem("checklist.bcc") || "";
  return { to, cc, bcc };
}

function normList(v) {
  if (!v) return [];
  return (Array.isArray(v) ? v : String(v).split(/[;,]\s*/)).filter(Boolean);
}

/** Open a mailto with explicit targets (does not use old utils/email.js) */
export function openEmailWithTargets(subject, body, targets = {}) {
  // Merge module targets + global overrides if present
  const global = getGlobalRecipients();
  const to  = normList(targets.to  || global.to).join(",");
  const cc  = normList(targets.cc  || global.cc).join(",");
  const bcc = normList(targets.bcc || global.bcc).join(",");

  const safeBody = (body || "").slice(0, 4000); // guard for long bodies

  let href = "mailto:" + encodeURIComponent(to);
  const params = [];
  if (cc)       params.push("cc=" + encodeURIComponent(cc));
  if (bcc)      params.push("bcc=" + encodeURIComponent(bcc));
  if (subject)  params.push("subject=" + encodeURIComponent(subject));
  if (safeBody) params.push("body=" + encodeURIComponent(safeBody));
  if (params.length) href += "?" + params.join("&");

  const win = window.open(href, "_self");
  if (!win) window.location.href = href;
}

/* ---------- Pretty plaintext formatting ---------- */
export function formatEmail({ title, meta = [], sections = [], footer = "— Meta —\nGenerated by the DailyChecks app." }) {
  const out = [];
  if (title) out.push(title, "");
  if (meta.length) out.push(...meta, "");
  for (const s of sections) {
    if (s.heading) out.push(s.heading);
    out.push(...(s.lines || []).map(l => (l.startsWith("• ") ? l : "• " + l)));
    out.push("");
  }
  out.push(footer);
  return out.join("\n");
}

const yn = (v) => (v === "yes" ? "yes" : v === "no" ? "no" : "–");

/* ---------- Module-specific body builders (optional) ---------- */
export function buildSolarWindsBody({ engineer, date, client, servicesRunning, sdTicket, alertsGenerated, notes }) {
  return formatEmail({
    title: "SolarWinds — Daily Checklist",
    meta: [`Engineer: ${engineer || "Unknown"}`, `Date: ${date || ""}`, `Client(s): ${client || "Multiple"}`],
    sections: [
      {
        heading: "Status",
        lines: [
          `Services running: ${yn(servicesRunning)}`,
          `Service down ticket: ${sdTicket || "–"}`,
          `Alerts generated: ${yn(alertsGenerated)}`,
        ],
      },
      ...(notes?.trim() ? [{ heading: "Notes", lines: [notes.trim()] }] : []),
    ],
  });
}

export function buildVeeamRowBody(row) {
  return formatEmail({
    title: "Veeam — Alert Details",
    sections: [{
      heading: "Alert",
      lines: [
        `Type: ${row?.type || "–"}`,
        `VBR Host: ${row?.vbrHost || "–"}`,
        `Details: ${row?.details || "–"}`,
        `Ticket: ${row?.ticket || "–"}`,
        ...(row?.notes ? [`Notes: ${row.notes}`] : []),
      ],
    }],
  });
}

export function buildCheckpointRowBody(row, envTitle) {
  return formatEmail({
    title: `Checkpoint — ${envTitle}`,
    sections: [{
      heading: "Alert",
      lines: [
        `Severity: ${row?.severity || "–"}`,
        `Alert Name: ${row?.name || "–"}`,
        `Machine: ${row?.machine || "–"}`,
        `Details: ${row?.details || "–"}`,
        `Ticket: ${row?.ticket || "–"}`,
        ...(row?.notes ? [`Notes: ${row.notes}`] : []),
      ],
    }],
  });
}
